using Microsoft.AspNetCore.Mvc.Testing;
using OracleGeneratorTests.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Json;
using System.Text;
using System.Threading.Tasks;

using Xunit;
using Microsoft.VisualStudio.TestPlatform.TestHost;

namespace OracleGeneratorTests.Tests
{
    public class OracleTests : IClassFixture<WebApplicationFactory<Program>>
    {
        private readonly HttpClient _client;

        public OracleTests(WebApplicationFactory<Program> factory)
        {
            _client = factory.CreateClient();
        }

        //[Fact]
        //public async Task RegisterUser_OracleTest()
        //{
        //    var spec = SpecLoader.LoadFromYaml("specs/register_user.yaml");

        //    var input = new Dictionary<string, object>
        //{
        //    { "username", "jdoe" },
        //    { "age", 25 },
        //    { "email", "jdoe@example.com" }
        //};

        //    var preValid = PreconditionValidator.Validate(spec, input, out var preFailures);
        //    Assert.True(preValid, $"Precondition failed: {string.Join("; ", preFailures)}");

        //    var content = JsonContent.Create(input);
        //    var response = await _client.PostAsync(spec.Endpoint, content);
        //    var body = await response.Content.ReadAsStringAsync();

        //    var validOutput = OutputOracle.Validate(spec, response, body, out var postFailures);
        //    Assert.True(validOutput, $"Output oracle failed: {string.Join("; ", postFailures)}");
        //}


        //[Theory]
        //[InlineData("Specs/register_user.yaml")]
        //[InlineData("Specs/transfer_funds.yaml")]
        //public async Task OracleTest_AutoGenerated(string specPath)
        //{
        //    var spec = SpecLoader.LoadFromYaml(specPath);

        //    // Generate sample input based on spec inputs (manual logic for now)
        //    var input = new Dictionary<string, object>();

        //    if (spec.Endpoint.Contains("register"))
        //    {
        //        input = new Dictionary<string, object>
        //    {
        //        { "username", "jdoe" },
        //        { "age", 23 },
        //        { "email", "jdoe@example.com" }
        //    };
        //    }
        //    else if (spec.Endpoint.Contains("transfer"))
        //    {
        //        input = new Dictionary<string, object>
        //    {
        //        { "from_account", "A001" },
        //        { "to_account", "B002" },
        //        { "amount", 20 }
        //    };
        //    }

        //    var preValid = PreconditionValidator.Validate(spec, input, out var preFailures);
        //    Assert.True(preValid, $"Precondition failed: {string.Join("; ", preFailures)}");

        //    var content = JsonContent.Create(input);
        //    var response = await _client.PostAsync(spec.Endpoint, content);
        //    var body = await response.Content.ReadAsStringAsync();

        //    var validOutput = OutputOracle.Validate(spec, response, body, out var postFailures);
        //    Assert.True(validOutput, $"Output oracle failed: {string.Join("; ", postFailures)}");
        //}

        [Theory]
        [InlineData("Specs/register_user.yaml")]
        [InlineData("Specs/transfer_funds.yaml")]
        public async Task OracleTest_AutoInputGenerated(string specPath)
        {
            var spec = SpecLoader.LoadFromYaml(specPath);

            for (int i = 0; i < 5; i++) // Run 5 randomized test cases
            {
                var input = TestInputGenerator.Generate(spec);

                Console.WriteLine(input);

                var preValid = PreconditionValidator.Validate(spec, input, out var preFailures);
                Assert.True(preValid, $"Precondition failed (case {i + 1}): {string.Join("; ", preFailures)}");

                var content = JsonContent.Create(input);
                var response = await _client.PostAsync(spec.Endpoint, content);
                var body = await response.Content.ReadAsStringAsync();

                var validOutput = OutputOracle.Validate(spec, response, body, out var postFailures);
                Assert.True(validOutput, $"Output oracle failed (case {i + 1}): {string.Join("; ", postFailures)}");
            }
        }
    }
}
